[project]
name = "Lektor"
description = "A static content management system."
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.7"
license = { file = "LICENSE" }
# FIXME? platforms = any
authors = [
    { name = "Armin Ronacher", email = "armin.ronacher@active-4.com" },
]
classifiers = [
    "Framework :: Lektor",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Babel",
    "click>=6.0",
    "deprecated",
    "EXIFRead",
    "filetype>=1.0.7",
    "Flask",
    "importlib_metadata; python_version<'3.8'",
    "inifile>=0.4.1",
    "Jinja2>=3.0",
    "MarkupSafe",
    "marshmallow",
    "marshmallow_dataclass>=8.5.9",
    "mistune>=0.7.0,<3",
    "pip",
    "python-slugify",
    "pytz",
    "requests",
    "setuptools",
    "watchdog",
    "Werkzeug>=2.1.0,<3",
]
optional-dependencies = { ipython = ["ipython"] }


[project.urls]
Homepage = "https://www.getlektor.com/"
Source = "https://github.com/lektor/lektor/"
Documentation = "https://www.getlektor.com/docs/"
Changelog = "https://github.com/lektor/lektor/blob/master/CHANGES.md"

[project.scripts]
lektor = "lektor.cli:main"

################################################################
#
# build configuration
#
[build-system]
requires = ["hatchling>=1.9.0", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "/lektor",
]
artifacts = [
    "/lektor/admin/static",
]

[tool.hatch.build.targets.sdist]
include = [
    "/lektor",
    "/CHANGES.md",
    "/frontend",
    "/tests",
]

[tool.hatch.build.hooks.custom]
path = "hatch_build.py"

[tool.hatch.version]
source = "vcs"


################################################################
#
# hatch env configuration
#
[tool.hatch.envs.default]
dependencies = [
    "pytest >= 6",
    "pytest-click",
    "pytest-mock",
    "coverage[toml]",
]
[tool.hatch.envs.default.scripts]
test-python = [
    "python -V",
    "pip freeze | python -c \"import sys; print(','.join(_.rstrip() for _ in sys.stdin))\"",
    "coverage run -m pytest tests",
]
cover-clean = [
    "- coverage combine -q",
    "coverage erase",
]
cover-report = [
    "- coverage combine --append",
    "coverage xml",
    "coverage report",
]
test-js = [
    "cd frontend && npm install",
    "cd frontend && npx tsc",
    "cd frontend && npm test",
]

[tool.hatch.envs.dev]
# Extra stuff that's nice to have in a development environment
#
#     hatch env create dev
#
# then, either
#
#     . $(hatch env find dev)/bin/activate
#
# or
#
#     hatch -e dev shell
#
# or
#
#     hatch run dev:emacs lektor/db.py &
#
dev-mode = true
extra-dependencies = [
    "flake8",
    "flake8-bugbear",
    "ipdb",
    "mypy==0.971",
    "pre-commit",
    "pylint==2.13.4",
    "pytest-cov",
]

[tool.hatch.envs.lint]
extra-dependencies = [
    "pylint==2.13.4",
]
[tool.hatch.envs.lint.scripts]
all = "pylint lektor tests"

[tool.hatch.envs.test]
dev-mode = false
[[tool.hatch.envs.test.matrix]]
python = ["3.7", "3.8", "3.9", "3.10"]
[[tool.hatch.envs.test.matrix]]
python = ["3.7", "3.8", "3.9", "3.10"]
mistune = ["mistune0"]
# FIXME: noutils?
[tool.hatch.envs.test.overrides]
name.'-mistune0\b'.dependencies = ["mistune<1"]




################################################################
#
# pytest
#
[tool.pytest.ini_options]
norecursedirs = ["venv", ".tox", ".git", "node_modules"]
addopts = "--strict-markers"
markers = [
    "requiresinternet: marks tests requiring an internet connection",
]


################################################################
#
# coverage
#
[tool.coverage.paths]
paths = [
    "lektor",
    ".tox/py*/*/lektor",
]
[tool.coverage.run]
parallel = true
source_pkgs = ["lektor"]
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    '^\s*\.\.\.\s*$',
]

################################################################
#
# pylint
#
[tool.pylint.MASTER]
ignore = [".git"]

[tool.pylint.FORMAT]
max-line-length = 91
max-module-lines = 2000

[tool.pylint.DESIGN]
max-attributes = 20
max-locals = 30
max-branches = 20
max-nested-blocks = 8
max-returns = 8

[tool.pylint.'MESSAGES CONTROL']
disable = [
    "redundant-u-string-prefix",
    "consider-using-f-string",
    "missing-docstring",
    "unused-argument",
    "redefined-outer-name",
    "invalid-name",
    "protected-access",
    "fixme",
    "broad-except",
    "redefined-builtin",
    "too-many-arguments",
    "too-few-public-methods",
    "too-many-public-methods",
    "duplicate-code",
]

[tool.mypy]
files = "$MYPY_CONFIG_FILE_DIR/lektor"

plugins = [
    "marshmallow_dataclass.mypy",
]

show_error_codes = true
error_summary = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true

strict = true
#implicit_reexport = true

# We have just started to add annotation.  For now, ignore all errors
# by default. (This can be disabled on a per-package or per-module
# basis in the overrides.)
ignore_errors = true

[[tool.mypy.overrides]]
# Packages and modules we want to check
module = [
    "lektor.constants",
    "lektor.admin.*",
]
ignore_errors = false

[[tool.mypy.overrides]]
module = [
    "lektor.admin.*",
]
disallow_untyped_calls = false
warn_return_any = false
